[
    { "keys": ["super+."], "command": "indent" },
    { "keys": ["super+,"], "command": "unindent" },

    // Disable auto-completions with Enter
    {
        "keys": ["enter"], "command": "insert",
        "context": [
            { "key": "auto_complete_visible" },
            { "key": "setting.auto_complete_commit_on_tab", "operand": false }
        ],
        "args": {"characters": "\n"},
    },


    // {"keys": ["super+]"], "command": "next_view"},
    // {"keys": ["super+["], "command": "prev_view"},
    { "keys": ["super+9"], "command": "last_view" },


    /************ VINTAGE KEYMAPS ************/

    // Vintage shortcuts for moving lines with hjkl
    { "keys": ["super+ctrl+j"], "command": "swap_line_down"},
    { "keys": ["super+ctrl+k"], "command": "swap_line_up"},
    { "keys": ["super+ctrl+h"], "command": "move_text_left"},
    { "keys": ["super+ctrl+l"], "command": "move_text_right"},

    // Page Scrolling (only viewport)
    { "keys": ["ctrl+u"], "command": "scroll_lines_fixed", "args" : {"by": "pages", "amount": -0.5 } },
    { "keys": ["ctrl+i"], "command": "scroll_lines_fixed", "args" : {"by": "pages", "amount": 0.5 } },
    { "keys": ["ctrl+o"], "command": "show_at_center" },
    // Scrolling
    { "keys": ["ctrl+j"], "command": "move", "args": { "by": "pages", "forward": true } },
    { "keys": ["ctrl+k"], "command": "move", "args": { "by": "pages", "forward": false } },

    // Vintage escape with jj
    { "keys": ["j", "j"], "command": "exit_insert_mode",
        "context":
        [
            { "key": "setting.command_mode", "operand": false },
            { "key": "setting.is_widget", "operand": false }
            // { "key": "selection_empty", "operator": "equal", "operand": false }
        ]
    },
    // Vintageous escape
    // {
    //     "keys": ["j", "j"],
    //     "command": "_enter_normal_mode",
    //     "args": {
    //         "mode": "mode_insert"
    //     },
    //     "context": [
    //         {"key": "vi_insert_mode_aware"},
    //     ],
    // },

    /*
    { "keys": [";", ";"], "command": "exit_insert_mode",
        "context": [
            { "key": "setting.command_mode", "operand": false },
            { "key": "setting.is_widget", "operand": false }
        ]
    },

    { "keys": [";", ";"], "command": "exit_visual_mode",
        "context": [
            { "key": "setting.command_mode"},
            { "key": "num_selections", "operand": 1},
            { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": false }
        ]
    },
    */


    //////////////////////////////
    // Command mode

    // Backspace goes back one char in command mode
    { "keys": ["backspace"], "command": "set_motion",
        "args":  {
            "motion": "vi_move_by_characters_in_line",
            "motion_args": {"extend": true, "forward": false},
        },
        "context":[
            { "key": "setting.command_mode", "operator": "equal", "operand": true },
            { "key": "setting.is_widget", "operand": false }
        ]
    },




    ////////////////////////////////////
    // EX mode
    { "keys": ["!", "!"], "command": "vi_colon_input",
        "args":  {
            "initial_text": ":.!"
        },
        "context":[
            { "key": "setting.command_mode", "operator": "equal", "operand": true },
            { "key": "setting.is_widget", "operand": false }
        ]
    },
    {
        "keys": ["/"], "command": "highlight_all",
        "context": [
            { "key": "setting.command_mode", "operator": "equal", "operand": true, },
            // { "key": "vi_mode_normal_or_any_visual", },
        ],
        "args": {
            "backwards": false,
        }
    },
    {
        "keys": ["?"], "command": "highlight_all",
        "context": [
            { "key": "setting.command_mode", "operator": "equal", "operand": true, },
            // { "key": "vi_mode_normal_or_any_visual", },
        ],
        "args": {
            "backwards": true,
        }
    },
    {
        "keys": ["up"], "command": "highlight_all_history",
        "args": {
            "backwards": true
        },
        "context":[
            { "key": "setting.vimSearchPanel", "operator": "equal", "operand": true }
        ]
    },

    {
        "keys": ["down"], "command": "highlight_all_history",
        "context": [
            { "key": "setting.vimSearchPanel", "operator": "equal", "operand": true }
        ]
    },
    {
        "keys": ["*"], "command": "highlight_all",
        "context": [
            { "key": "setting.command_mode", "operator": "equal", "operand": true, },
            // { "key": "vi_mode_normal_or_any_visual", },
        ],
        "args": {
            "word": true,
        }
    },
    {
        "keys": ["#"], "command": "highlight_all",
        "context": [
            { "key": "setting.command_mode", "operator": "equal", "operand": true, },
            // { "key": "vi_mode_normal_or_any_visual", },
        ],
        "args": {
            "backwards": true,
            "word": true,
        }
    },
    { "keys": ["n"], "command": "highlight_all_next", "context": [{ "key": "setting.command_mode" }]},
    { "keys": ["N"], "command": "highlight_all_next", "context": [{ "key": "setting.command_mode" }], "args": { "backwards": true}},
    { "keys": [",", " "], "command": "clear_all_highlights", "context": [{ "key": "setting.command_mode" }]},

    {
        "keys": [":"], "command": "ex_mode",
        "context": [
            { "key": "setting.command_mode", "operator": "equal", "operand": true, },
            // { "key": "vi_mode_normal_or_any_visual", },
        ],
    },

    // Close the Ex Field using backspace if its empty and you press backspace
    {
        "keys": ["backspace"], "command": "close_input_field",
        "context": [
            { "key": "setting.vimExPanel", "operator": "equal", "operand": true },
            { "key": "setting.vimExPanelEmpty", "operator": "equal", "operand": true },
        ],
    },


    /*
    {
        "keys": ["@", ":"], "command": "vi_colon_repeat_last",
        "context":
        [
            { "key": "setting.command_mode", "operator": "equal", "operand": true }
        ]
    },

    // The following belong rather in Vintage, but let's keep them here for now.
    { "keys": ["/"], "command": "vi_search", "context": [{ "key": "setting.command_mode" }], "args": {"initial_text": "/"}},
    { "keys": ["?"], "command": "vi_search", "context": [{ "key": "setting.command_mode" }], "args": {"initial_text": "?"}},

    // Override these ones so that the necessary state is kept in VintageEx.
    { "keys": ["n"], "command": "vi_repeat_search_forward", "context": [{ "key": "setting.command_mode" }]},
    { "keys": ["N"], "command": "vi_repeat_search_backward", "context": [{ "key": "setting.command_mode" }]},

    // Override these ones so that the necessary state is kept in VintageEx.
    { "keys": ["*"], "command": "vi_find_under", "context": [{ "key": "setting.command_mode" }]},
    { "keys": ["#"], "command": "vi_find_under", "args": {"forward": false}, "context": [{ "key": "setting.command_mode" }]},

        */



    //////////////////////////////////////
    // Misc


    {
        "keys": ["ctrl+n", "ctrl+n"],
        "command": "toggle_setting",
        "args":
        {
            "setting": "line_numbers"
        }
    },
    {
        "keys": ["ctrl+t", "ctrl+t"],
        "command": "toggle_setting",
        "args":
        {
            "setting": "translate_tabs_to_spaces"
        }
    },




    // Inside and Around < >
    { "keys": ["i", "<"], "command": "set_motion", "args": {
        "motion": "vi_expand_to_brackets",
        "motion_args": {"character": "<"}},
        "context": [
            {"key": "setting.command_mode"},
            // {"key": "setting.vi_mode_normal_or_any_visual"},
            {"key": "vi_can_enter_text_object"},
        ],
    },
    { "keys": ["a", "<"], "command": "set_motion", "args": {
        "motion": "vi_expand_to_brackets",
        "motion_args": {"character": "<", "outer": true}},
        "context": [
            {"key": "setting.command_mode"},
            // {"key": "setting.vi_mode_normal_or_any_visual"},
            {"key": "vi_can_enter_text_object"},
        ],
    },
    { "keys": ["i", ">"], "command": "set_motion", "args": {
        "motion": "vi_expand_to_brackets",
        "motion_args": {"character": "<"}},
        "context": [
            {"key": "setting.command_mode"},
            // {"key": "setting.vi_mode_normal_or_any_visual"},
            {"key": "vi_can_enter_text_object"},
        ],
    },
    { "keys": ["a", ">"], "command": "set_motion", "args": {
        "motion": "vi_expand_to_brackets",
        "motion_args": {"character": "<", "outer": true}},
        "context": [
            {"key": "setting.command_mode"},
            // {"key": "setting.vi_mode_normal_or_any_visual"},
            {"key": "vi_can_enter_text_object"},
        ],
    },

    // Remap space to : in command mode
    // {
    //     "keys": [" "], "command": "vi_colon_input",
    //     "context": [
    //         { "key": "setting.command_mode", "operator": "equal", "operand": true }
    //     ]
    // },

    /**************************************/

    // Working with the build menu
    // Kill the currently running command
    {
        "keys": ["super+shift+b"],
        "command": "exec",
        "args": {"kill": true}
    },
    {
        "keys": ["super+ctrl+shift+b"],
        "command": "show_panel",
        "args": {"panel": "output.exec", "toggle": true}
    },



    // Fix Code Wrapping in Vim
    // { "keys": ["g", "q"], "command": "wrap_lines_plus",
        // "context":
        // [
            // { "key": "setting.command_mode", "operand": false }
            // { "key": "setting.is_widget", "operand": false }
        // ]
    // },

    // Move text left/right
    // requires: Move Text
    { "keys": ["super+ctrl+left"], "command": "move_text_left" },
    { "keys": ["super+ctrl+right"], "command": "move_text_right" },

    // Disable paging with super + arrowKey
    { "keys": ["super+left"], "command": "set_motion", "args": {
        "motion": "vi_move_by_characters_in_line",
        "motion_args": {"forward": false, "extend": true }}

        // Toggle to disable this in insert mode
        // "context": [{"key": "setting.command_mode"}]
    },
    { "keys": ["super+right"], "command": "set_motion", "args": {
        "motion": "vi_move_by_characters_in_line",
        "motion_args": {"forward": true, "extend": true, "visual": false }}

        // Toggle to disable this in insert mode
        // "context": [{"key": "setting.command_mode"}]
    },
    { "keys": ["super+up"], "command": "set_motion", "args": {
        "motion": "move",
        "motion_args": {"by": "lines", "forward": false, "extend": true }}

        // Toggle to disable this in insert mode
        // "context": [{"key": "setting.command_mode"}]
    },
    { "keys": ["super+down"], "command": "set_motion", "args": {
        "motion": "move",
        "motion_args": {"by": "lines", "forward": true, "extend": true }}

        // Toggle to disable this in insert mode
        // "context": [{"key": "setting.command_mode"}]
    },

    // Zooming
    { "keys": ["super+0"], "command": "reset_font_size" },


    // Code Intel
    { "keys": ["ctrl+shift+space"], "command": "code_intel_auto_complete" },
    // { "keys": ["ctrl+shift+j"], "command": "back_to_python_definition" },
    // { "keys": ["ctrl+shift+k"], "command": "goto_python_definition" },


    // Mark and Move
    { "keys": ["ctrl+m"], "command": "mark_and_move_do_it_all" },
    { "keys": ["ctrl+shift+m"], "command": "mark_and_move_clear" },


    /******************  SNIPPETS  ********************/
    // TODO: in-progres

    // Disable sublime default shortcuts for snippets
    // { "keys": ["tab"], "command": "noop", "context":
    //     [
    //         { "key": "has_next_field", "operator": "equal", "operand": true }
    //     ],
    // },
    // { "keys": ["tab"], "command": "noop", "context":
    //     [
    //         { "key": "has_prev_field", "operator": "equal", "operand": true }
    //     ],
    // },

    // Now: add my own
    // { "keys": ["meta+tab"], "command": "next_field", "context":
    //     [
    //         { "key": "has_next_field", "operator": "equal", "operand": true }
    //     ],
    // },
    // { "keys": ["meta+tab"], "command": "prev_field", "context":
    //     [
    //         { "key": "has_prev_field", "operator": "equal", "operand": true }
    //     ],
    // },

    // { "keys": ["escape"], "command": "clear_fields", "context":
    //     [
    //         { "key": "has_next_field", "operator": "equal", "operand": true }
    //     ]
    // },
    // { "keys": ["escape"], "command": "clear_fields", "context":
    //     [
    //         { "key": "has_prev_field", "operator": "equal", "operand": true }
    //     ]
    // },
]
