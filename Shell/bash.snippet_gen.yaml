scope: source.shell
snippets:
    block:
      # Already in some plugins
      - trigger: case
        snippet: |
          case ${1:\$variable} in
          	${2:pattern})
          		;;
          esac
      - trigger: elif
        snippet: |
          elif [[ ${1:condition} ]]; then
          	${2::  # statements}
      - trigger: if
        snippet: |
          if [[ ${1:condition} ]]; then
          	${2::  # statements}
          fi
      - trigger: else
        snippet: |
          else

      - trigger: for-in
        snippet: |
          for ${1:i} in ${2:{1..10}}; do
          	${3::  # statements}
          done
      - trigger: for
        snippet: |
          for (( ${1:i} = ${2:0}; ${1} < ${3:10}; ${1}++ )); do
          	${4::  # statements}
          done

      - trigger: while
        snippet: |
          while [[ ${1:condition} ]]; do
          	${2::  # statements}
          done
      - trigger: while-read
        snippet: |
          while read -r ${1:var}; do
          	${2::  # echo "\${${1}}";}
          done ${3:< ${4: /path/to/file}}
      - trigger: until
        snippet: |
          until [[ ${1:condition} ]]; do
          	${2::  # statements}
          done

      - trigger: ["heredoc", "multiline"]
        snippet: |
          <<EOF
          ${1}
          EOF
        tags: ["heredoc"]

      - trigger: function
        snippet: |
          function ${1:foo}() {
          	local ${2:param}=\$1;

          	${3:# statements}
          }
      - trigger: ["__main__", "main"]
        snippet: |
          #!/usr/bin/env bash
          #

          readonly PROG_NAME=\$(basename "\$0")
          readonly PROG_DIR=\$( ( readlink -f "\${BASH_SOURCE[0]}" || greadlink -f "\${BASH_SOURCE[0]}" ) 2>/dev/null )

          function cleanup() (
            :  # Your cleanup code here
          )

          function main() (
          	# Abort on failure
          	set -e
          	# Abort on unset variables
          	set -u
          	# If a glob fails to expand, error out (instead of leaving the *)
          	shopt -s failglob
          	# Abort if any pipe command fails
          	#    Warning! this makes handling with \$? harder
          	set -o pipefail
          	# Prevent spaces from breaking up "word" inputs in loops
          	IFS=\$'\n\t'

          	# Prepare crash/finish cleanup
          	trap cleanup EXIT SIGINT SIGTERM


          	${1:# statements}

          	return 0;
          )

          # If you're running directly call main (but not when sourced from elsewhere)
          [[ "\$0" == "\${BASH_SOURCE[0]}" ]] && main "\$@"

    subroutine:
      - trigger: script_path
        snippet: |
          readonly PROG_DIR=\$( ( readlink -f "\${BASH_SOURCE[0]}" || greadlink -f "\${BASH_SOURCE[0]}" ) 2>/dev/null )
      - trigger: keepalive
        snippet: |
          # Keep retrying if we get an error return
          # DO NOT retry on signals (e.g. SIGINT)
          function keep_alive() (
          	main || keep_alive;
          )
      - trigger: retval
        snippet: |
          local retval=0;
          ${1:cmd} || retval=\$?;
      - trigger: ["shell-sub", "subshell"]
        snippet: "{ ${1:noop} }"
      - trigger: shell-group
        snippet: "{ ${1:noop} }"
    keyword:
      - break
      - continue


      - fi
      - done
      - esac

      - printf
      - echo
      - EOF

    file:
      - trigger: devnull
        snippet: /dev/null
      - trigger: devzero
        snippet: /dev/zero
      - trigger: devrandom
        snippet: /dev/random
      - trigger: devurandom
        snippet: /dev/urandom
      - trigger: ["tty", "devtty"]
        snippet: /dev/tty

    synonym:
      - trigger: print
        snippet: printf "${1:}\n"
      - trigger: error
        snippet: 2>&1 echo "${1:message}"
      - trigger: noop
        snippet: ":"
      - trigger: math
        snippet: =\$(( ${1:i + 1} ))


